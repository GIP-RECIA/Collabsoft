# For more information see: https://docs.github.com/en/actions/

name: Project CI

on:
  push:
    branches: ['main']
    paths: ['**.java', '**.ts', '**.vue', '.github/workflows/**', 'pom.xml', 'package.json', 'yarn.lock']
  pull_request:
    branches: ['main']
  workflow_dispatch:

env:
  LANG: 'fr_FR.UTF-8'
  LC_ALL: 'fr_FR.UTF-8'
  LANGUAGE: 'fr_FR.UTF-8'
  LC_CTYPE: 'fr_FR.UTF-8'
  TZ: 'Europe/Paris'
  MARIADB_IMG: 'wodby/mariadb'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: ['11', '17']
        node: ['20']
        mariadb: ['10.3', 'latest']

    name: Java ${{ matrix.java }}, Node ${{ matrix.node }} & mariadb ${{ matrix.mariadb }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: 'Europe/Paris'
      - name: Set up locale ENV
        run: |
          sudo locale-gen $LANG
          sudo update-locale LANG=$LANG
          sudo apt install net-tools
      - name: Check locales
        run: locale -a

      # Setup mariadb
      - name: Pull ${{ env.MARIADB_IMG }}:${{ matrix.mariadb }} image
        run: docker pull ${{ env.MARIADB_IMG }}:${{ matrix.mariadb }}
      - name: Run MariaDB container
        run: |
          docker run -t -d --name mariadb --rm -v \
            --health-cmd="mysqladmin -uroot -proot ping" --health-interval=10s --health-timeout=10s --health-retries=10 \
            -p 3306:3306/tcp \
            -e "TZ=Europe/Paris" \
            -e "MYSQL_USER=root" \
            -e "MYSQL_ROOT_PASSWORD=root" \
            -e "MYSQL_DATABASE=collabsoft" \
            -e "MYSQL_DEFAULT_STORAGE_ENGINE=InnoDB" \
            -e "MYSQL_CHARACTER_SET_SERVER=utf8mb4" \
            -e "MYSQL_COLLATION_SERVER=utf8mb4_unicode_520_ci" \
            -e "MYSQL_INNODB_BUFFER_POOL_SIZE=2G" \
            -e "MYSQL_INNODB_DEFAULT_ROW_FORMAT=dynamic" \
            -e "MYSQL_INNODB_DATA_FILE_PATH=ibdata1:100M:autoextend:max:10G" \
            -e "MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT=1" \
            -e "MYSQL_INNODB_LOG_BUFFER_SIZE=64M" \
            -e "MYSQL_INNODB_LOG_FILE_SIZE=256M" \
            -e "MYSQL_INNODB_STRICT_MODE=ON" \
            -e "MYSQL_LOWER_CASE_TABLE_NAMES=1" \
            -e "MYSQL_MAX_CONNECT_ERRORS=100" \
            -e "MYSQL_MAX_CONNECTIONS=1000" \
            -e "MYSQL_QUERY_CACHE_LIMIT=10M" \
            -e "MYSQL_QUERY_CACHE_SIZE=0" \
            -e "MYSQL_QUERY_CACHE_TYPE=OFF" \
            ${{ env.MARIADB_IMG }}:${{ matrix.mariadb }} &
          sleep 30
      - name: Test MariaDB
        run: docker exec mariadb /bin/bash -c "mysql -h127.0.0.1 -uroot -proot -e \"show variables like '%time_zone'; select now();\""
      - name: Check date
        run: |
          date
          mysql -h127.0.0.1 -uroot -proot -e "show variables like '%time_zone'; select now();"
      - name: DB connection test and conf checks
        run: |
          netstat -pnltu
          mysql -h127.0.0.1 -uroot -proot -e "show databases;"
          mysql -h127.0.0.1 -uroot -proot -e "show variables like 'char%'; show variables like 'collation%';show variables like 'innodb_default_row_format';"
          mysql -h127.0.0.1 -uroot -proot -e "use collabsoft;show tables;"
      - name: Populate database
        run: mysql -h127.0.0.1 -uroot -proot < ./src/test/resources/collabsoft.sql

      # Setup Java
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven
      - name: Check license hearders
        run: ./mvnw license:check
      - name: Check NOTICE
        run: ./mvnw notice:check

      # Setup Node
      - name: Set up Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable

      # Builds
      - name: Build frontend
        run: yarn build
      - name: Build backend
        run: ./mvnw -B clean package -Pprod -Dmaven.test.skip=true -Darguments="-DskipTests"

      # Tests
      - name: Tests frontend (unit tests)
        run: yarn test:unit
      # - name: Tests frontend (e2e tests)
      #   run: yarn test:e2e
      - name: Tests backend
        run: ./mvnw test -Ptest
